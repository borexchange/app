generator client {
  provider = "prisma-client-js"
  seed     = "./seed/seed.mjs"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model notification {
  id         Int       @id @default(autoincrement())
  user_id    Int
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "notifications_user_id_foreign")
  type       String?   @db.VarChar(255)
  title      String    @db.VarChar(255)
  message    String    @db.Text
  link       String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([user_id], map: "notifications_user_id_foreign")
}

model provideruser {
  id               Int                   @id @default(autoincrement())
  provider         provideruser_provider
  provider_user_id String                @unique(map: "provider_user_id")
  user_id          Int
  updated_at       DateTime?
  user             user                  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "ProviderUser_user_id_fkey")

  @@index([user_id], map: "ProviderUser_user_id_fkey")
}

model onetimetoken {
  id           Int                       @id @default(autoincrement())
  token_id     String                    @unique(map: "token_id") @db.VarChar(60)
  token_type   onetimetokens_token_type?
  expires_at   DateTime                  @db.DateTime(0)
  date_created DateTime                  @default(now()) @db.DateTime(0)
  updated_at   DateTime?
}

model session {
  id           Int      @id @default(autoincrement())
  user_id      Int
  sid          String   @unique(map: "sid")
  access_token String   @db.VarChar(4000)
  csrf_token   String   @db.VarChar(255)
  is_active    Boolean
  ip_address   String
  created_at   DateTime @default(now()) @db.DateTime(0)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "Session_user_id_fkey")

  @@index([user_id], map: "Session_user_id_fkey")
}

model refreshtokens {
  id         Int      @id @default(autoincrement())
  token_id   String   @unique(map: "token_id") @db.VarChar(255)
  user_id    Int
  is_active  Boolean
  created_at DateTime @default(now()) @db.DateTime(0)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "RefreshTokens_user_id_fkey")

  @@index([user_id], map: "RefreshTokens_user_id_fkey")
}

model role {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  rolepermission rolepermission[]
  user           user[]
}

model permission {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  rolepermission rolepermission[]
}

model rolepermission {
  id            Int        @id @default(autoincrement())
  role_id       Int
  permission_id Int
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "RolePermission_permission_id_fkey")
  role          role       @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "RolePermission_role_id_fkey")

  @@index([permission_id], map: "RolePermission_permission_id_fkey")
  @@index([role_id], map: "RolePermission_role_id_fkey")
}

model api_key {
  id         Int      @id @default(autoincrement())
  user_id    Int
  key        String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @updatedAt @db.DateTime(0)

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], name: "api_key_user_id_idx")
}

model user {
  id                    Int                  @id @default(autoincrement())
  uuid                  String               @unique(map: "uuid") @db.VarChar(60)
  email                 String               @unique(map: "email") @db.VarChar(255)
  password              String               @db.VarChar(255)
  avatar                String?              @db.VarChar(1000)
  first_name            String               @db.VarChar(255)
  last_name             String               @db.VarChar(255)
  email_verified        Boolean              @default(false)
  is_active             Boolean              @default(true)
  phone                 String?              @db.VarChar(255)
  role_id               Int                  @default(1)
  metadata              Json?                @db.Json
  notifications         Json?                @db.Json
  last_login            DateTime?            @db.DateTime(0)
  last_failed_login     DateTime?            @db.DateTime(0)
  failed_login_attempts Int?                 @default(0)
  status                user_status?         @default(ACTIVE)
  created_at            DateTime             @default(now()) @db.DateTime(0)
  deleted_at            DateTime?            @db.DateTime(0)
  updated_at            DateTime?
  provideruser          provideruser[]
  refreshtokens         refreshtokens[]
  session               session[]
  role                  role                 @relation(fields: [role_id], references: [id], map: "User_role_id_fkey")
  notification          notification[]
  sentChats             support_chat[]       @relation("SentChats")
  receivedChats         support_chat[]       @relation("ReceivedChats")
  wallet                wallet[]
  twofactor             twofactor?
  author                author?
  transaction           transaction[]
  sentInvoices          invoice[]            @relation("SentInvoices")
  receivedInvoices      invoice[]            @relation("ReceivedInvoices")
  exchange_orders       exchange_orders[]
  binary_orders         binary_orders[]
  investment            investment[]
  support_ticket        support_ticket[]
  kyc                   kyc?
  exchange_watchlist    exchange_watchlist[]
  api_key               api_key[]
  ai_trading            ai_trading[]
}

enum user_status {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
}

enum provideruser_provider {
  GOOGLE
}

enum onetimetokens_token_type {
  RESET
}

enum wallet_type {
  FIAT
  SPOT
  ECO
}

model wallet {
  id                       Int                        @id @default(autoincrement())
  uuid                     String                     @unique
  user_id                  Int
  type                     wallet_type
  currency                 String                     @db.VarChar(255)
  balance                  Float                      @default(0)
  inOrder                  Float?                     @default(0)
  addresses                Json?                      @db.Json
  status                   Boolean                    @default(true)
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  user                     user                       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transactions             transaction[]
  investment               investment[]
  wallet_data              wallet_data[]
  ecosystem_private_ledger ecosystem_private_ledger[]

  @@unique([user_id, currency, type], name: "wallet_user_id_currency_type_unique")
}

model wallet_data {
  id        Int    @id @default(autoincrement())
  wallet_id Int
  currency  String @db.VarChar(255)
  chain     String @db.VarChar(255)
  balance   Float  @default(0)
  index     Int
  data      Json   @db.Json
  wallet    wallet @relation(fields: [wallet_id], references: [id])

  @@unique([wallet_id, currency, chain], name: "wallet_data_unique")
}

enum MasterWalletStatus {
  ACTIVE
  INACTIVE
}

model ecosystem_master_wallet {
  id                         Int                          @id @default(autoincrement())
  uuid                       String                       @unique
  chain                      String                       @db.VarChar(255)
  currency                   String                       @db.VarChar(255)
  address                    String                       @db.VarChar(255)
  balance                    Float                        @default(0)
  data                       Json?                        @db.Json
  status                     MasterWalletStatus           @default(ACTIVE)
  last_index                 Int                          @default(0)
  ecosystem_custodial_wallet ecosystem_custodial_wallet[]

  @@unique([chain, currency], name: "ecosystem_master_wallet_chain_currency_unique")
}

model ecosystem_custodial_wallet {
  id               Int                     @id @default(autoincrement())
  uuid             String                  @unique
  master_wallet_id Int
  master_wallet    ecosystem_master_wallet @relation(fields: [master_wallet_id], references: [id], onDelete: Cascade)
  address          String                  @unique @db.VarChar(255)
  chain            String                  @db.VarChar(255)
  network          String                  @default("mainnet") @db.VarChar(255)
  status           CustodialWalletStatus   @default(ACTIVE)
  created_at       DateTime                @default(now())

  @@index([master_wallet_id], name: "custodial_wallet_master_wallet_id_idx")
}

enum CustodialWalletStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model ecosystem_token {
  id           Int                        @id @default(autoincrement())
  contract     String                     @unique @db.VarChar(255)
  name         String                     @db.VarChar(255)
  currency     String                     @db.VarChar(255)
  chain        String                     @db.VarChar(255)
  network      String                     @db.VarChar(255)
  type         String                     @db.VarChar(255)
  decimals     Int
  status       Boolean?                   @default(false)
  precision    Int?                       @default(8)
  limits       Json?                      @db.Json
  fees         Json?                      @db.Json
  icon         String?                    @db.VarChar(1000)
  contractType EcosystemTokenContractType @default(PERMIT)
  created_at   DateTime                   @default(now())
}

enum EcosystemTokenContractType {
  PERMIT
  NO_PERMIT
  NATIVE
}

model ecosystem_market {
  id          Int      @id @default(autoincrement())
  symbol      String   @unique
  pair        String
  is_trending Boolean? @default(false)
  is_hot      Boolean? @default(false)
  metadata    Json?    @db.Json
  status      Boolean
}

model ecosystem_private_ledger {
  id                  Int    @id @default(autoincrement())
  wallet_id           Int
  index               Int
  currency            String @db.VarChar(255)
  chain               String @db.VarChar(255)
  network             String @default("mainnet") @db.VarChar(255)
  offchain_difference Float  @default(0)
  wallet              wallet @relation(fields: [wallet_id], references: [id], onDelete: Cascade)

  @@unique([wallet_id, index, currency, chain, network], name: "private_ledger_unique")
}

model transaction {
  id           Int                @id @default(autoincrement())
  uuid         String             @unique
  user_id      Int
  wallet_id    Int
  type         transaction_type
  status       transaction_status @default(PENDING)
  amount       Float
  fee          Float?             @default(0)
  description  String?            @db.Text
  metadata     Json?              @db.Json
  reference_id String?            @unique
  created_at   DateTime           @default(now())
  updated_at   DateTime?          @updatedAt
  wallet       wallet             @relation(fields: [wallet_id], references: [id], onDelete: Cascade)
  user         user               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  invoice      invoice[]

  @@index([wallet_id], map: "transaction_wallet_id_foreign")
}

enum transaction_type {
  FAILED
  DEPOSIT
  WITHDRAW
  OUTGOING_TRANSFER
  INCOMING_TRANSFER
  PAYMENT
  REFUND
  BINARY_ORDER
  EXCHANGE_ORDER
  INVESTMENT
  INVESTMENT_ROI
  AI_INVESTMENT
  AI_INVESTMENT_ROI
  INVOICE
}

enum transaction_status {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
  REJECTED
  REFUNDED
  TIMEOUT
}

model invoice {
  id             Int            @id @default(autoincrement())
  amount         Float
  description    String?        @db.Text
  status         invoice_status
  transaction_id Int?
  transaction    transaction?   @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  sender_id      Int
  sender         user           @relation("SentInvoices", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver_id    Int
  receiver       user           @relation("ReceivedInvoices", fields: [receiver_id], references: [id], onDelete: Cascade)
  created_at     DateTime?      @default(now())
  updated_at     DateTime?      @updatedAt
  due_date       DateTime?

  @@index([sender_id], map: "invoice_sender_id_foreign")
  @@index([receiver_id], map: "invoice_receiver_id_foreign")
  @@index([transaction_id], map: "invoice_transaction_id_foreign")
}

enum invoice_status {
  UNPAID
  PAID
  CANCELLED
}

model twofactor {
  id        Int             @id @default(autoincrement())
  user_id   Int             @unique
  user      user            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  secret    String          @db.VarChar(255)
  type      two_factor_type
  enabled   Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([user_id], map: "two_factor_user_id_foreign")
}

enum two_factor_type {
  EMAIL
  SMS
  APP
}

model settings {
  key   String @id @db.VarChar(255)
  value String @db.Text
}

model author {
  id      Int           @id @default(autoincrement())
  uuid    String        @unique
  user_id Int           @unique
  status  author_status @default(PENDING)
  user    user          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  posts   post[]
  comment comment[]
}

enum author_status {
  PENDING
  APPROVED
  REJECTED
}

model category {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  slug        String  @unique @db.VarChar(255)
  image       String? @db.Text
  description String? @db.Text
  post        post[]
}

model comment {
  id         Int       @id @default(autoincrement())
  content    String    @db.Text
  author_id  Int
  author     author    @relation(fields: [author_id], references: [id], onDelete: Cascade, map: "comments_author_id_foreign")
  post_id    Int
  post       post      @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "comments_post_id_foreign")
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@index([post_id], map: "comments_post_id_foreign")
  @@index([author_id], map: "comments_author_id_foreign")
}

model post_tag {
  id      Int  @id @default(autoincrement())
  post_id Int
  post    post @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "post_tag_post_id_foreign")
  tag_id  Int
  tag     tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade, map: "post_tag_tag_id_foreign")

  @@index([post_id], map: "post_tag_post_id_foreign")
  @@index([tag_id], map: "post_tag_tag_id_foreign")
}

model post {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  content     String      @db.Text
  category_id Int
  category    category    @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "posts_category_id_foreign")
  author_id   Int
  author      author      @relation(fields: [author_id], references: [id], onDelete: Cascade, map: "posts_author_id_foreign")
  slug        String      @unique @db.VarChar(255)
  description String?     @db.Text
  status      post_status @default(DRAFT)
  image       String?     @db.Text
  created_at  DateTime?   @default(now())
  updated_at  DateTime?   @updatedAt
  comment     comment[]
  post_tag    post_tag[]

  @@index([category_id], map: "posts_category_id_foreign")
  @@index([author_id], map: "posts_author_id_foreign")
}

enum post_status {
  PUBLISHED
  DRAFT
  TRASH
}

model tag {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  slug     String     @unique @db.VarChar(255)
  post_tag post_tag[]
}

model exchange {
  id            Int      @id @default(autoincrement())
  name          String
  title         String
  status        Boolean? @default(false)
  username      String?
  licenseStatus Boolean? @default(false)
  version       String?  @default("0.0.1")
  productId     String?  @unique
  type          String?  @default("spot")
}

model exchange_market {
  id          Int      @id @default(autoincrement())
  symbol      String   @unique
  pair        String
  is_trending Boolean? @default(false)
  is_hot      Boolean? @default(false)
  metadata    Json?    @db.Json
  status      Boolean
}

model exchange_currency {
  id        Int     @id @default(autoincrement())
  currency  String  @unique
  name      String
  precision Float
  price     Float?
  status    Boolean
  chains    Json?   @db.Json
}

model exchange_orders {
  id           Int                    @id @default(autoincrement())
  uuid         String                 @unique
  reference_id String?                @unique
  user_id      Int
  user         user                   @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "exchange_orders_user_id_foreign")
  status       exchange_order_status
  symbol       String
  type         exchange_order_type
  timeInForce  exchange_time_in_force
  side         exchange_order_side
  price        Float
  average      Float?
  amount       Float
  filled       Float
  remaining    Float
  cost         Float
  trades       Json?
  fee          Float
  fee_currency String
  created_at   DateTime               @default(now())
  updated_at   DateTime               @updatedAt

  @@index([user_id], map: "exchange_orders_user_id_foreign")
}

enum exchange_order_side {
  BUY
  SELL
}

enum exchange_order_type {
  MARKET
  LIMIT
}

enum exchange_order_status {
  OPEN
  CLOSED
  CANCELED
  EXPIRED
  REJECTED
}

enum exchange_time_in_force {
  GTC
  IOC
  FOK
  PO
}

model exchange_watchlist {
  id      Int                     @id @default(autoincrement())
  user_id Int
  user    user                    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "exchange_watchlist_user_id_foreign")
  symbol  String
  type    exchange_watchlist_type @default(TRADE)

  @@index([user_id], map: "exchange_watchlist_user_id_foreign")
}

enum exchange_watchlist_type {
  TRADE
  BINARY
  AI_TRADING
  FOREX
  STOCK
  FUTURES
}

model binary_orders {
  id          Int                 @id @default(autoincrement())
  uuid        String              @unique
  user_id     Int
  user        user                @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "binary_orders_user_id_foreign")
  symbol      String
  price       Float
  amount      Float
  profit      Float
  side        binary_order_side
  type        binary_order_type
  status      binary_order_status
  is_demo     Boolean             @default(false)
  closed_at   DateTime
  close_price Float?
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt

  @@index([user_id], map: "binary_orders_user_id_foreign")
}

enum binary_order_side {
  RISE
  FALL
}

enum binary_order_type {
  RISE_FALL
}

enum binary_order_status {
  PENDING
  WIN
  LOSS
  DRAW
  CANCELLED
  REJECTED
  EXPIRED
}

model withdraw_method {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(255)
  processing_time String   @db.VarChar(255)
  instructions    String   @db.Text
  image           String?  @db.VarChar(1000)
  fixed_fee       Float    @default(0.00)
  percentage_fee  Float    @default(0.00)
  min_amount      Float    @default(0.00)
  max_amount      Float
  custom_fields   Json?    @db.Json
  status          Boolean? @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model deposit_method {
  id             Int      @id @default(autoincrement())
  title          String   @db.VarChar(255)
  instructions   String   @db.Text
  image          String?  @db.VarChar(1000)
  fixed_fee      Float    @default(0.00)
  percentage_fee Float    @default(0.00)
  min_amount     Float    @default(0.00)
  max_amount     Float
  custom_fields  Json?    @db.Json
  status         Boolean? @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model investment_plan {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  title       String
  image       String?
  description String        @db.Text
  currency    fiat_currency @default(USD)
  min_amount  Float
  max_amount  Float
  roi         Float
  duration    Int
  status      Boolean?      @default(false)
  created_at  DateTime      @default(now())
  investment  investment[]
}

model investment {
  id         Int               @id @default(autoincrement())
  uuid       String            @unique
  user_id    Int
  user       user              @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "investment_user_id_foreign")
  plan_id    Int
  plan       investment_plan   @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "investment_plan_id_foreign")
  wallet_id  Int
  wallet     wallet            @relation(fields: [wallet_id], references: [id], onDelete: Cascade, map: "investment_wallet_id_foreign")
  amount     Float
  roi        Float
  duration   Int
  status     investment_status @default(PENDING)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt

  @@index([user_id], map: "investment_user_id_foreign")
  @@index([plan_id], map: "investment_plan_id_foreign")
}

enum investment_status {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  REJECTED
}

model support_chat {
  id             Int              @id @default(autoincrement())
  uuid           String           @unique
  user_id        Int
  agent_id       Int?
  messages       Json?            @db.Json
  created_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime?        @db.Timestamp(0)
  user           user             @relation("SentChats", fields: [user_id], references: [id], onDelete: Cascade)
  agent          user?            @relation("ReceivedChats", fields: [agent_id], references: [id], onDelete: Cascade)
  support_ticket support_ticket[]

  @@index([user_id], map: "messages_user_id_foreign")
  @@index([agent_id], map: "agent_id")
}

model support_ticket {
  id         Int               @id @default(autoincrement())
  uuid       String            @unique
  user_id    Int
  user       user              @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "support_ticket_user_id_foreign")
  chat_id    Int?
  chat       support_chat?     @relation(fields: [chat_id], references: [id], onDelete: Cascade, map: "support_ticket_chat_id_foreign")
  subject    String
  message    String
  importance ticket_importance @default(LOW)
  status     ticket_status     @default(PENDING)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt

  @@index([user_id], map: "support_ticket_user_id_foreign")
}

enum ticket_status {
  PENDING
  OPEN
  REPLIED
  CLOSED
}

enum ticket_importance {
  LOW
  MEDIUM
  HIGH
}

model page {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  content     String      @db.Text
  description String?     @db.Text
  image       String?     @db.Text
  slug        String      @unique @db.VarChar(255)
  status      page_status @default(DRAFT)
  created_at  DateTime?   @default(now())
  updated_at  DateTime?   @updatedAt
}

enum page_status {
  PUBLISHED
  DRAFT
}

model currency {
  id        Int     @id @default(autoincrement())
  code      String  @unique
  name      String
  symbol    String
  precision Float
  price     Float?
  status    Boolean
}

enum fiat_currency {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTN
  BWP
  BYN
  BYR
  BZD
  CAD
  CDF
  CHF
  CLF
  CLP
  CNY
  COP
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GGP
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  IMP
  INR
  IQD
  IRR
  ISK
  JEP
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LTL
  LVL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XCD
  XDR
  XOF
  XPF
  YER
  ZAR
  ZMK
  ZMW
  ZWL
}

model deposit_gateway {
  id             Int                  @id @default(autoincrement())
  name           String               @unique
  title          String
  description    String               @db.Text
  image          String?              @db.VarChar(1000)
  alias          String?              @unique
  currencies     Json?                @db.Json
  fixed_fee      Float?               @default(0.00)
  percentage_fee Float?               @default(0.00)
  min_amount     Float?               @default(0.00)
  max_amount     Float?
  type           deposit_gateway_type @default(FIAT)
  status         Boolean?             @default(false)
  version        String?              @default("0.0.1")
  productId      String?              @unique
}

enum deposit_gateway_type {
  FIAT
  CRYPTO
}

model kyc_template {
  id      Int      @id @default(autoincrement())
  title   String   @unique
  options Json?    @db.Json
  status  Boolean? @default(false)
  kyc     kyc[]
}

model kyc {
  id          Int          @id @default(autoincrement())
  user_id     Int          @unique
  user        user         @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "kyc_user_id_foreign")
  template_id Int
  template    kyc_template @relation(fields: [template_id], references: [id], onDelete: Cascade, map: "kyc_template_id_foreign")
  data        Json?        @db.Json
  status      kyc_status   @default(PENDING)
  level       Int          @default(0)
  notes       String?      @db.Text
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@index([user_id], map: "kyc_user_id_foreign")
  @@index([template_id], map: "kyc_template_id_foreign")
}

enum kyc_status {
  PENDING
  APPROVED
  REJECTED
}

model system_health {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  status     Boolean? @default(false)
  notes      String?  @db.Text
  updated_at DateTime @updatedAt
}

model extension {
  id          Int      @id @default(autoincrement())
  product_id  String   @unique
  name        String   @unique
  title       String?
  description String?  @db.Text
  link        String?
  status      Boolean? @default(false)
  version     String?  @default("0.0.1")
  image       String?  @db.VarChar(1000)
}

model notification_templates {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  subject     String
  email_body  String?  @db.Text
  sms_body    String?  @db.Text
  push_body   String?  @db.Text
  short_codes Json?    @db.Json
  email       Boolean? @default(false)
  sms         Boolean? @default(false)
  push        Boolean? @default(false)
}

model frontend {
  id      Int      @id @default(autoincrement())
  section String   @unique
  title   String
  content Json?    @db.Json
  status  Boolean? @default(false)
}

enum ai_trading_result {
  WIN
  LOSS
  DRAW
}

enum ai_trading_status {
  ACTIVE
  COMPLETED
  CANCELLED
  REJECTED
}

model ai_trading_plan {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  title                    String
  description              String?                    @db.Text
  image                    String?                    @db.VarChar(1000)
  status                   Boolean?                   @default(false)
  invested                 Int                        @default(0)
  profit_percentage        Float                      @default(0.00)
  min_profit               Float
  max_profit               Float
  min_amount               Float                      @default(0.00)
  max_amount               Float
  trending                 Boolean?                   @default(false)
  default_profit           Float
  default_result           ai_trading_result
  ai_trading               ai_trading[]
  ai_trading_plan_duration ai_trading_plan_duration[]
}

model ai_trading {
  id          Int                  @id @default(autoincrement())
  uuid        String               @unique
  user_id     Int
  user        user                 @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "ai_trading_user_id_foreign")
  plan_id     Int
  plan        ai_trading_plan      @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "ai_trading_plan_id_foreign")
  duration_id Int?
  duration    ai_trading_duration? @relation(fields: [duration_id], references: [id], onDelete: Cascade, map: "ai_trading_duration_id_foreign")
  market      String
  amount      Float
  profit      Float?
  result      ai_trading_result?
  status      ai_trading_status    @default(ACTIVE)
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt

  @@index([user_id], map: "ai_trading_user_id_foreign")
  @@index([plan_id], map: "ai_trading_plan_id_foreign")
  @@index([duration_id], map: "ai_trading_duration_id_foreign")
}

model ai_trading_duration {
  id                       Int                        @id @default(autoincrement())
  duration                 Int
  timeframe                ai_trading_timeframe
  ai_trading_plan_duration ai_trading_plan_duration[]
  ai_trading               ai_trading[]
}

enum ai_trading_timeframe {
  HOUR
  DAY
  WEEK
  MONTH
}

model ai_trading_plan_duration {
  id          Int                 @id @default(autoincrement())
  plan_id     Int
  plan        ai_trading_plan     @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "ai_trading_plan_duration_plan_id_foreign")
  duration_id Int
  duration    ai_trading_duration @relation(fields: [duration_id], references: [id], onDelete: Cascade, map: "ai_trading_plan_duration_duration_id_foreign")

  @@index([plan_id], map: "ai_trading_plan_duration_plan_id_foreign")
  @@index([duration_id], map: "ai_trading_plan_duration_duration_id_foreign")
}
